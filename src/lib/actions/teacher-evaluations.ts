'use server';

import { db } from '@/db';
import { evaluations } from '@/db/schema';
import { nanoid } from 'nanoid';
import { revalidatePath } from 'next/cache';
import { safeJsonStringify } from '@/lib/utils';

interface SaveEvaluationParams {
  submissionId: string;
  evaluatorId: string;
  rubricId: string;
  scores: Record<string, any>;
  criteriaFeedback: Record<string, string>;
  generalFeedback?: string;
  isAutoGenerated?: boolean;
  evaluationId?: string;
}

export async function saveEvaluation({
  submissionId,
  evaluatorId,
  rubricId,
  scores,
  criteriaFeedback,
  generalFeedback = '',
  isAutoGenerated = false,
  evaluationId,
}: SaveEvaluationParams) {
  try {
    const evaluationData = {
      submissionId,
      evaluatorId,
      rubricId,
      scores: safeJsonStringify(scores),
      criteriaFeedback: safeJsonStringify(criteriaFeedback),
      generalFeedback,
      isAutoGenerated,
      evaluatedAt: new Date(),
    };

    if (evaluationId) {
      // Update existing evaluation
      await db
        .update(evaluations)
        .set(evaluationData)
        .where(evaluations.id === evaluationId);
    } else {
      // Create new evaluation
      await db.insert(evaluations).values({
        id: nanoid(),
        ...evaluationData,
      });
    }

    // Revalidate paths
    revalidatePath(
      `/teacher/assignments/[assignmentId]/submissions/[submissionId]`,
    );
    revalidatePath(`/teacher/assignments/[assignmentId]`);
    revalidatePath(`/student/assignments/[assignmentId]`);

    return { success: true };
  } catch (error) {
    console.error('Error saving evaluation:', error);
    return {
      error: 'Gagal menyimpan penilaian. Silakan coba lagi.',
    };
  }
}
